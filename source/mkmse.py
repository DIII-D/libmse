#
#add a command to open a tree for edit
#environment path variable must be set
#for tree mydiag use something like
#export mydiag_path=./trees\;
#
from MDSplus import tree
from MDSplus import compound as cmpnd
outtree = tree.Tree(tree='mse',mode='NEW')
node = outtree.addNode('.ANALYSIS_01',usage='STRUCTURE')
if True:
    node = outtree.addNode('.ANALYSIS_01:COMMENTS',usage='TEXT')
    node = outtree.addNode('.ANALYSIS_01:MSEP01',usage='SIGNAL')
    node.addTag('MSEP01')
    node.addTag('MSEP1')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP01.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP01.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP01.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP01.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP01:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP01:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP01:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP01:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP01STD')
            node.addTag('MSEP1STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP01:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP02',usage='SIGNAL')
    node.addTag('MSEP02')
    node.addTag('MSEP2')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP02.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP02.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP02.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP02.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP02:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP02:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP02:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP02:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP02STD')
            node.addTag('MSEP2STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP02:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP03',usage='SIGNAL')
    node.addTag('MSEP03')
    node.addTag('MSEP3')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP03.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP03.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP03.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP03.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP03:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP03:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP03:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP03:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP03STD')
            node.addTag('MSEP3STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP03:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP04',usage='SIGNAL')
    node.addTag('MSEP04')
    node.addTag('MSEP4')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP04.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP04.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP04.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP04.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP04:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP04:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP04:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP04:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP04STD')
            node.addTag('MSEP4STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP04:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP05',usage='SIGNAL')
    node.addTag('MSEP05')
    node.addTag('MSEP5')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP05.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP05.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP05.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP05.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP05:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP05:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP05:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP05:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP05STD')
            node.addTag('MSEP5STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP05:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP06',usage='SIGNAL')
    node.addTag('MSEP06')
    node.addTag('MSEP6')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP06.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP06.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP06.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP06.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP06:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP06:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP06:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP06:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP06STD')
            node.addTag('MSEP6STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP06:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP07',usage='SIGNAL')
    node.addTag('MSEP07')
    node.addTag('MSEP7')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP07.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP07.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP07.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP07.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP07:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP07:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP07:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP07:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP07STD')
            node.addTag('MSEP7STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP07:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP08',usage='SIGNAL')
    node.addTag('MSEP08')
    node.addTag('MSEP8')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP08.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP08.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP08.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP08.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP08:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP08:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP08:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP08:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP08STD')
            node.addTag('MSEP8STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP08:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP09',usage='SIGNAL')
    node.addTag('MSEP09')
    node.addTag('MSEP9')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP09.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP09.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP09.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP09.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP09:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP09:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP09:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP09:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP09STD')
            node.addTag('MSEP9STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP09:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP10',usage='SIGNAL')
    node.addTag('MSEP10')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP10.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP10.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP10.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP10.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP10:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP10:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP10:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP10:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP10STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP10:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP11',usage='SIGNAL')
    node.addTag('MSEP11')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP11.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP11.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP11.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP11.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP11:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP11:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP11:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP11:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP11STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP11:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP12',usage='SIGNAL')
    node.addTag('MSEP12')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP12.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP12.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP12.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP12.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP12:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP12:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP12:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP12:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP12STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP12:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP13',usage='SIGNAL')
    node.addTag('MSEP13')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP13.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP13.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP13.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP13.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP13:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP13:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP13:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP13:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP13STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP13:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP14',usage='SIGNAL')
    node.addTag('MSEP14')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP14.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP14.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP14.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP14.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP14:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP14:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP14:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP14:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP14STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP14:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP15',usage='SIGNAL')
    node.addTag('MSEP15')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP15.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP15.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP15.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP15.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP15:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP15:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP15:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP15:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP15STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP15:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP16',usage='SIGNAL')
    node.addTag('MSEP16')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP16.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP16.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP16.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP16.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP16:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP16:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP16:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP16:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP16STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP16:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP17',usage='SIGNAL')
    node.addTag('MSEP17')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP17.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP17.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP17.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP17.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP17:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP17:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP17:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP17:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP17STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP17:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP18',usage='SIGNAL')
    node.addTag('MSEP18')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP18.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP18.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP18.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP18.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP18:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP18:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP18:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP18:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP18STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP18:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP19',usage='SIGNAL')
    node.addTag('MSEP19')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP19.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP19.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP19.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP19.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP19:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP19:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP19:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP19:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP19STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP19:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP20',usage='SIGNAL')
    node.addTag('MSEP20')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP20.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP20.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP20.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP20.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP20:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP20:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP20:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP20:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP20STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP20:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP21',usage='SIGNAL')
    node.addTag('MSEP21')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP21.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP21.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP21.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP21.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP21:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP21:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP21:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP21:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP21STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP21:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP22',usage='SIGNAL')
    node.addTag('MSEP22')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP22.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP22.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP22.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP22.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP22:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP22:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP22:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP22:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP22STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP22:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP23',usage='SIGNAL')
    node.addTag('MSEP23')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP23.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP23.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP23.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP23.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP23:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP23:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP23:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP23:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP23STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP23:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP24',usage='SIGNAL')
    node.addTag('MSEP24')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP24.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP24.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP24.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP24.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP24:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP24:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP24:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP24:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP24STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP24:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP25',usage='SIGNAL')
    node.addTag('MSEP25')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP25.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP25.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP25.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP25.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP25:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP25:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP25:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP25:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP25STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP25:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP26',usage='SIGNAL')
    node.addTag('MSEP26')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP26.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP26.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP26.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP26.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP26:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP26:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP26:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP26:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP26STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP26:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP27',usage='SIGNAL')
    node.addTag('MSEP27')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP27.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP27.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP27.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP27.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP27:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP27:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP27:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP27:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP27STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP27:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP28',usage='SIGNAL')
    node.addTag('MSEP28')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP28.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP28.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP28.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP28.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP28:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP28:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP28:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP28:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP28STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP28:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP29',usage='SIGNAL')
    node.addTag('MSEP29')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP29.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP29.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP29.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP29.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP29:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP29:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP29:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP29:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP29STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP29:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP30',usage='SIGNAL')
    node.addTag('MSEP30')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP30.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP30.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP30.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP30.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP30:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP30:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP30:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP30:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP30STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP30:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP31',usage='SIGNAL')
    node.addTag('MSEP31')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP31.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP31.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP31.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP31.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP31:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP31:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP31:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP31:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP31STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP31:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP32',usage='SIGNAL')
    node.addTag('MSEP32')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP32.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP32.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP32.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP32.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP32:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP32:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP32:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP32:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP32STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP32:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP33',usage='SIGNAL')
    node.addTag('MSEP33')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP33.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP33.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP33.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP33.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP33:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP33:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP33:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP33:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP33STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP33:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP34',usage='SIGNAL')
    node.addTag('MSEP34')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP34.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP34.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP34.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP34.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP34:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP34:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP34:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP34:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP34STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP34:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP35',usage='SIGNAL')
    node.addTag('MSEP35')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP35.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP35.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP35.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP35.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP35:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP35:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP35:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP35:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP35STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP35:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP36',usage='SIGNAL')
    node.addTag('MSEP36')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP36.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP36.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP36.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP36.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP36:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP36:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP36:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP36:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP36STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP36:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP37',usage='SIGNAL')
    node.addTag('MSEP37')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP37.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP37.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP37.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP37.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP37:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP37:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP37:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP37:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP37STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP37:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP38',usage='SIGNAL')
    node.addTag('MSEP38')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP38.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP38.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP38.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP38.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP38:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP38:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP38:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP38:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP38STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP38:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP39',usage='SIGNAL')
    node.addTag('MSEP39')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP39.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP39.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP39.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP39.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP39:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP39:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP39:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP39:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP39STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP39:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP40',usage='SIGNAL')
    node.addTag('MSEP40')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP40.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP40.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP40.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP40.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP40:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP40:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP40:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP40:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP40STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP40:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP41',usage='SIGNAL')
    node.addTag('MSEP41')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP41.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP41.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP41.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP41.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP41:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP41:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP41:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP41:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP41STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP41:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP42',usage='SIGNAL')
    node.addTag('MSEP42')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP42.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP42.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP42.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP42.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP42:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP42:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP42:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP42:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP42STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP42:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP43',usage='SIGNAL')
    node.addTag('MSEP43')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP43.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP43.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP43.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP43.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP43:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP43:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP43:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP43:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP43STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP43:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP44',usage='SIGNAL')
    node.addTag('MSEP44')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP44.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP44.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP44.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP44.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP44:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP44:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP44:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP44:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP44STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP44:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP45',usage='SIGNAL')
    node.addTag('MSEP45')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP45.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP45.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP45.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP45.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP45:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP45:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP45:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP45:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP45STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP45:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP46',usage='SIGNAL')
    node.addTag('MSEP46')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP46.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP46.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP46.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP46.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP46:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP46:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP46:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP46:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP46STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP46:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP47',usage='SIGNAL')
    node.addTag('MSEP47')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP47.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP47.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP47.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP47.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP47:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP47:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP47:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP47:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP47STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP47:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP48',usage='SIGNAL')
    node.addTag('MSEP48')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP48.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP48.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP48.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP48.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP48:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP48:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP48:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP48:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP48STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP48:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP49',usage='SIGNAL')
    node.addTag('MSEP49')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP49.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP49.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP49.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP49.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP49:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP49:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP49:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP49:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP49STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP49:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP50',usage='SIGNAL')
    node.addTag('MSEP50')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP50.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP50.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP50.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP50.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP50:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP50:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP50:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP50:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP50STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP50:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP51',usage='SIGNAL')
    node.addTag('MSEP51')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP51.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP51.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP51.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP51.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP51:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP51:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP51:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP51:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP51STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP51:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP52',usage='SIGNAL')
    node.addTag('MSEP52')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP52.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP52.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP52.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP52.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP52:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP52:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP52:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP52:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP52STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP52:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP53',usage='SIGNAL')
    node.addTag('MSEP53')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP53.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP53.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP53.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP53.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP53:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP53:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP53:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP53:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP53STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP53:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP54',usage='SIGNAL')
    node.addTag('MSEP54')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP54.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP54.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP54.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP54.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP54:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP54:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP54:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP54:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP54STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP54:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP55',usage='SIGNAL')
    node.addTag('MSEP55')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP55.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP55.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP55.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP55.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP55:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP55:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP55:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP55:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP55STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP55:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP56',usage='SIGNAL')
    node.addTag('MSEP56')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP56.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP56.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP56.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP56.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP56:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP56:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP56:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP56:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP56STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP56:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP57',usage='SIGNAL')
    node.addTag('MSEP57')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP57.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP57.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP57.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP57.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP57:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP57:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP57:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP57:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP57STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP57:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP58',usage='SIGNAL')
    node.addTag('MSEP58')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP58.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP58.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP58.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP58.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP58:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP58:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP58:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP58:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP58STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP58:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP59',usage='SIGNAL')
    node.addTag('MSEP59')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP59.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP59.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP59.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP59.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP59:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP59:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP59:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP59:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP59STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP59:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP60',usage='SIGNAL')
    node.addTag('MSEP60')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP60.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP60.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP60.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP60.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP60:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP60:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP60:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP60:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP60STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP60:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP61',usage='SIGNAL')
    node.addTag('MSEP61')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP61.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP61.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP61.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP61.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP61:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP61:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP61:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP61:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP61STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP61:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP62',usage='SIGNAL')
    node.addTag('MSEP62')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP62.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP62.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP62.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP62.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP62:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP62:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP62:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP62:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP62STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP62:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP63',usage='SIGNAL')
    node.addTag('MSEP63')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP63.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP63.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP63.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP63.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP63:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP63:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP63:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP63:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP63STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP63:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP64',usage='SIGNAL')
    node.addTag('MSEP64')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP64.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP64.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP64.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP64.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP64:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP64:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP64:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP64:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP64STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP64:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP65',usage='SIGNAL')
    node.addTag('MSEP65')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP65.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP65.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP65.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP65.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP65:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP65:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP65:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP65:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP65STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP65:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP66',usage='SIGNAL')
    node.addTag('MSEP66')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP66.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP66.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP66.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP66.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP66:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP66:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP66:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP66:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP66STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP66:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP67',usage='SIGNAL')
    node.addTag('MSEP67')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP67.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP67.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP67.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP67.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP67:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP67:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP67:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP67:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP67STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP67:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP68',usage='SIGNAL')
    node.addTag('MSEP68')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP68.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP68.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP68.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP68.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP68:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP68:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP68:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP68:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP68STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP68:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:MSEP69',usage='SIGNAL')
    node.addTag('MSEP69')
    if True:
        node = outtree.addNode('.ANALYSIS_01:MSEP69.CALIBRATION',usage='STRUCTURE')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP69.CALIBRATION:FITFUNCTION',usage='NUMERIC')
            node = outtree.addNode('.ANALYSIS_01:MSEP69.CALIBRATION:MRZ0_FILE',usage='TEXT')
            node = outtree.addNode('.ANALYSIS_01:MSEP69.CALIBRATION:MSETUP2_FILE',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP69:BEAM',usage='TEXT')
        node = outtree.addNode('.ANALYSIS_01:MSEP69:TIME',usage='SIGNAL')
        node = outtree.addNode('.ANALYSIS_01:MSEP69:TWO_K',usage='SIGNAL')
        if True:
            node = outtree.addNode('.ANALYSIS_01:MSEP69:TWO_K:STDDEV',usage='SIGNAL')
            node.addTag('MSEP69STD')
            node = outtree.addNode('.ANALYSIS_01:MSEP69:TWO_K:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:TIME',usage='SIGNAL')
    node = outtree.addNode('.ANALYSIS_01:VERSION',usage='TEXT')
node = outtree.addNode('.GEOMETRY',usage='STRUCTURE')
if True:
    node = outtree.addNode('.GEOMETRY:A1',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A2',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A3',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A4',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A5',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A6',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:A7',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:ALPHA',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:OMEGA',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:PHI_DOPLER',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:PHI_TOR',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:R',usage='SIGNAL')
    node.addTag('MSE_R')
    node = outtree.addNode('.GEOMETRY:RESOLUTION',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:THETA',usage='SIGNAL')
    node = outtree.addNode('.GEOMETRY:Z',usage='SIGNAL')
    node.addTag('MSE_Z')
node = outtree.addNode(':BLESSED_ID',usage='TEXT')
#d = outtree.tdiCompile('analysis_01')
#node.putData(d)
node.putData('analysis_01')
node = outtree.addNode(':COMMENTS',usage='TEXT')
node = outtree.addNode(':LOADER',usage='ACTION')
d = outtree.tdiCompile('Build_Action(Build_Dispatch(2, "mdsloader", "NBD3", 10, "MSELOADER"), LOADDATA("MSE", "talos", "/fusion/projects/codes/mse/loader/load_mse.sh " // $SHOT // "&"), "", *, *)')
node.putData(d)
node = outtree.addNode(':MS01',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS01.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS01.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS01.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS1_R')
        node.addTag('MS01_R')
        node = outtree.addNode(':MS01.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS01.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS01.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS1_Z')
        node.addTag('MS01_Z')
    node = outtree.addNode(':MS01:BEAM',usage='TEXT')
    node = outtree.addNode(':MS01:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS1B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS1B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms1b", $SHOT), "volts"), DIM_OF(ptdata("ms1b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS01:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS01:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS01:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS01:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS1A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS1A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms1a", $SHOT), "volts"), DIM_OF(ptdata("ms1a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS01:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS01:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS01:TIME',usage='SIGNAL')
node = outtree.addNode(':MS02',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS02.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS02.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS02.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS2_R')
        node.addTag('MS02_R')
        node = outtree.addNode(':MS02.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS02.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS02.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS2_Z')
        node.addTag('MS02_Z')
    node = outtree.addNode(':MS02:BEAM',usage='TEXT')
    node = outtree.addNode(':MS02:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS2B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS2B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms2b", $SHOT), "volts"), DIM_OF(ptdata("ms2b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS02:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS02:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS02:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS02:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS2A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS2A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms2a", $SHOT), "volts"), DIM_OF(ptdata("ms2a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS02:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS02:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS02:TIME',usage='SIGNAL')
node = outtree.addNode(':MS03',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS03.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS03.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS03.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS3_R')
        node.addTag('MS03_R')
        node = outtree.addNode(':MS03.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS03.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS03.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS3_Z')
        node.addTag('MS03_Z')
    node = outtree.addNode(':MS03:BEAM',usage='TEXT')
    node = outtree.addNode(':MS03:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS3B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS3B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms3b", $SHOT), "volts"), DIM_OF(ptdata("ms3b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS03:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS03:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS03:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS03:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS3A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS3A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms3a", $SHOT), "volts"), DIM_OF(ptdata("ms3a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS03:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS03:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS03:TIME',usage='SIGNAL')
node = outtree.addNode(':MS04',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS04.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS04.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS04.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS4_R')
        node.addTag('MS04_R')
        node = outtree.addNode(':MS04.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS04.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS04.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS4_Z')
        node.addTag('MS04_Z')
    node = outtree.addNode(':MS04:BEAM',usage='TEXT')
    node = outtree.addNode(':MS04:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS4B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS4B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms4b", $SHOT), "volts"), DIM_OF(ptdata("ms4b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS04:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS04:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS04:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS04:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS4A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS4A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms4a", $SHOT), "volts"), DIM_OF(ptdata("ms4a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS04:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS04:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS04:TIME',usage='SIGNAL')
node = outtree.addNode(':MS05',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS05.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS05.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS05.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS5_R')
        node.addTag('MS05_R')
        node = outtree.addNode(':MS05.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS05.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS05.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS5_Z')
        node.addTag('MS05_Z')
    node = outtree.addNode(':MS05:BEAM',usage='TEXT')
    node = outtree.addNode(':MS05:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS5B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS5B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms5b", $SHOT), "volts"), DIM_OF(ptdata("ms5b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS05:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS05:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS05:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS05:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS5A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS5A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms5a", $SHOT), "volts"), DIM_OF(ptdata("ms5a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS05:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS05:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS05:TIME',usage='SIGNAL')
node = outtree.addNode(':MS06',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS06.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS06.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS06.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS6_R')
        node.addTag('MS06_R')
        node = outtree.addNode(':MS06.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS06.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS06.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS6_Z')
        node.addTag('MS06_Z')
    node = outtree.addNode(':MS06:BEAM',usage='TEXT')
    node = outtree.addNode(':MS06:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS6B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS6B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms6b", $SHOT), "volts"), DIM_OF(ptdata("ms6b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS06:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS06:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS06:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS06:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS6A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS6A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms6a", $SHOT), "volts"), DIM_OF(ptdata("ms6a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS06:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS06:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS06:TIME',usage='SIGNAL')
node = outtree.addNode(':MS07',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS07.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS07.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS07.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS7_R')
        node.addTag('MS07_R')
        node = outtree.addNode(':MS07.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS07.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS07.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS7_Z')
        node.addTag('MS07_Z')
    node = outtree.addNode(':MS07:BEAM',usage='TEXT')
    node = outtree.addNode(':MS07:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS7B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS7B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms7b", $SHOT), "volts"), DIM_OF(ptdata("ms7b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS07:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS07:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS07:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS07:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS7A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS7A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms7a", $SHOT), "volts"), DIM_OF(ptdata("ms7a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS07:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS07:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS07:TIME',usage='SIGNAL')
node = outtree.addNode(':MS08',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS08.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS08.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS08.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS8_R')
        node.addTag('MS08_R')
        node = outtree.addNode(':MS08.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS08.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS08.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS8_Z')
        node.addTag('MS08_Z')
    node = outtree.addNode(':MS08:BEAM',usage='TEXT')
    node = outtree.addNode(':MS08:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS8B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS8B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms8b", $SHOT), "volts"), DIM_OF(ptdata("ms8b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS08:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS08:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS08:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS08:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS8A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS8A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms8a", $SHOT), "volts"), DIM_OF(ptdata("ms8a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS08:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS08:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS08:TIME',usage='SIGNAL')
node = outtree.addNode(':MS09',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS09.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS09.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS09.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS9_R')
        node.addTag('MS09_R')
        node = outtree.addNode(':MS09.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS09.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS09.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS9_Z')
        node.addTag('MS09_Z')
    node = outtree.addNode(':MS09:BEAM',usage='TEXT')
    node = outtree.addNode(':MS09:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS9B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS9B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms9b", $SHOT), "volts"), DIM_OF(ptdata("ms9b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS09:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS09:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS09:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS09:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS9A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS9A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms9a", $SHOT), "volts"), DIM_OF(ptdata("ms9a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS09:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS09:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS09:TIME',usage='SIGNAL')
node = outtree.addNode(':MS10',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS10.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS10.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS10.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS10_R')
        node = outtree.addNode(':MS10.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS10.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS10.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS10_Z')
    node = outtree.addNode(':MS10:BEAM',usage='TEXT')
    node = outtree.addNode(':MS10:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS10B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS10B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms10b", $SHOT), "volts"), DIM_OF(ptdata("ms10b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS10:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS10:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS10:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS10:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS10A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS10A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms10a", $SHOT), "volts"), DIM_OF(ptdata("ms10a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS10:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS10:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS10:TIME',usage='SIGNAL')
node = outtree.addNode(':MS11',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS11.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS11.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS11.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS11_R')
        node = outtree.addNode(':MS11.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS11.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS11.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS11_Z')
    node = outtree.addNode(':MS11:BEAM',usage='TEXT')
    node = outtree.addNode(':MS11:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS11B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS11B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms11b", $SHOT), "volts"), DIM_OF(ptdata("ms11b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS11:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS11:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS11:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS11:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS11A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS11A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms11a", $SHOT), "volts"), DIM_OF(ptdata("ms11a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS11:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS11:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS11:TIME',usage='SIGNAL')
node = outtree.addNode(':MS12',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS12.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS12.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS12.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS12_R')
        node = outtree.addNode(':MS12.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS12.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS12.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS12_Z')
    node = outtree.addNode(':MS12:BEAM',usage='TEXT')
    node = outtree.addNode(':MS12:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS12B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS12B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms12b", $SHOT), "volts"), DIM_OF(ptdata("ms12b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS12:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS12:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS12:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS12:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS12A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS12A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms12a", $SHOT), "volts"), DIM_OF(ptdata("ms12a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS12:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS12:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS12:TIME',usage='SIGNAL')
node = outtree.addNode(':MS13',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS13.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS13.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS13.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS13_R')
        node = outtree.addNode(':MS13.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS13.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS13.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS13_Z')
    node = outtree.addNode(':MS13:BEAM',usage='TEXT')
    node = outtree.addNode(':MS13:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS13B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS13B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms13b", $SHOT), "volts"), DIM_OF(ptdata("ms13b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS13:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS13:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS13:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS13:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS13A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS13A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms13a", $SHOT), "volts"), DIM_OF(ptdata("ms13a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS13:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS13:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS13:TIME',usage='SIGNAL')
node = outtree.addNode(':MS14',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS14.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS14.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS14.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS14_R')
        node = outtree.addNode(':MS14.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS14.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS14.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS14_Z')
    node = outtree.addNode(':MS14:BEAM',usage='TEXT')
    node = outtree.addNode(':MS14:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS14B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS14B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms14b", $SHOT), "volts"), DIM_OF(ptdata("ms14b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS14:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS14:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS14:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS14:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS14A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS14A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms14a", $SHOT), "volts"), DIM_OF(ptdata("ms14a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS14:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS14:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS14:TIME',usage='SIGNAL')
node = outtree.addNode(':MS15',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS15.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS15.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS15.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS15_R')
        node = outtree.addNode(':MS15.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS15.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS15.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS15_Z')
    node = outtree.addNode(':MS15:BEAM',usage='TEXT')
    node = outtree.addNode(':MS15:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS15B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS15B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms15b", $SHOT), "volts"), DIM_OF(ptdata("ms15b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS15:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS15:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS15:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS15:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS15A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS15A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms15a", $SHOT), "volts"), DIM_OF(ptdata("ms15a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS15:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS15:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS15:TIME',usage='SIGNAL')
node = outtree.addNode(':MS16',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS16.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS16.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS16.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS16_R')
        node = outtree.addNode(':MS16.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS16.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS16.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS16_Z')
    node = outtree.addNode(':MS16:BEAM',usage='TEXT')
    node = outtree.addNode(':MS16:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS16B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS16B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms16b", $SHOT), "volts"), DIM_OF(ptdata("ms16b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS16:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS16:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS16:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS16:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS16A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS16A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms16a", $SHOT), "volts"), DIM_OF(ptdata("ms16a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS16:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS16:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS16:TIME',usage='SIGNAL')
node = outtree.addNode(':MS17',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS17.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS17.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS17.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS17_R')
        node = outtree.addNode(':MS17.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS17.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS17.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS17_Z')
    node = outtree.addNode(':MS17:BEAM',usage='TEXT')
    node = outtree.addNode(':MS17:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS17B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS17B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms17b", $SHOT), "volts"), DIM_OF(ptdata("ms17b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS17:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS17:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS17:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS17:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS17A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS17A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms17a", $SHOT), "volts"), DIM_OF(ptdata("ms17a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS17:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS17:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS17:TIME',usage='SIGNAL')
node = outtree.addNode(':MS18',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS18.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS18.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS18.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS18_R')
        node = outtree.addNode(':MS18.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS18.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS18.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS18_Z')
    node = outtree.addNode(':MS18:BEAM',usage='TEXT')
    node = outtree.addNode(':MS18:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS18B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS18B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms18b", $SHOT), "volts"), DIM_OF(ptdata("ms18b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS18:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS18:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS18:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS18:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS18A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS18A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms18a", $SHOT), "volts"), DIM_OF(ptdata("ms18a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS18:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS18:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS18:TIME',usage='SIGNAL')
node = outtree.addNode(':MS19',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS19.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS19.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS19.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS19_R')
        node = outtree.addNode(':MS19.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS19.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS19.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS19_Z')
    node = outtree.addNode(':MS19:BEAM',usage='TEXT')
    node = outtree.addNode(':MS19:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS19B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS19B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms19b", $SHOT), "volts"), DIM_OF(ptdata("ms19b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS19:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS19:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS19:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS19:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS19A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS19A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms19a", $SHOT), "volts"), DIM_OF(ptdata("ms19a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS19:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS19:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS19:TIME',usage='SIGNAL')
node = outtree.addNode(':MS20',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS20.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS20.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS20.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS20_R')
        node = outtree.addNode(':MS20.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS20.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS20.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS20_Z')
    node = outtree.addNode(':MS20:BEAM',usage='TEXT')
    node = outtree.addNode(':MS20:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS20B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS20B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms20b", $SHOT), "volts"), DIM_OF(ptdata("ms20b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS20:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS20:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS20:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS20:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS20A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS20A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms20a", $SHOT), "volts"), DIM_OF(ptdata("ms20a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS20:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS20:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS20:TIME',usage='SIGNAL')
node = outtree.addNode(':MS21',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS21.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS21.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS21.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS21_R')
        node = outtree.addNode(':MS21.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS21.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS21.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS21_Z')
    node = outtree.addNode(':MS21:BEAM',usage='TEXT')
    node = outtree.addNode(':MS21:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS21B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS21B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms21b", $SHOT), "volts"), DIM_OF(ptdata("ms21b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS21:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS21:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS21:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS21:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS21A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS21A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms21a", $SHOT), "volts"), DIM_OF(ptdata("ms21a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS21:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS21:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS21:TIME',usage='SIGNAL')
node = outtree.addNode(':MS22',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS22.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS22.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS22.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS22_R')
        node = outtree.addNode(':MS22.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS22.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS22.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS22_Z')
    node = outtree.addNode(':MS22:BEAM',usage='TEXT')
    node = outtree.addNode(':MS22:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS22B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS22B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms22b", $SHOT), "volts"), DIM_OF(ptdata("ms22b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS22:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS22:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS22:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS22:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS22A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS22A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms22a", $SHOT), "volts"), DIM_OF(ptdata("ms22a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS22:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS22:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS22:TIME',usage='SIGNAL')
node = outtree.addNode(':MS23',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS23.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS23.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS23.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS23_R')
        node = outtree.addNode(':MS23.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS23.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS23.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS23_Z')
    node = outtree.addNode(':MS23:BEAM',usage='TEXT')
    node = outtree.addNode(':MS23:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS23B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS23B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms23b", $SHOT), "volts"), DIM_OF(ptdata("ms23b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS23:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS23:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS23:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS23:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS23A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS23A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms23a", $SHOT), "volts"), DIM_OF(ptdata("ms23a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS23:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS23:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS23:TIME',usage='SIGNAL')
node = outtree.addNode(':MS24',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS24.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS24.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS24.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS24_R')
        node = outtree.addNode(':MS24.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS24.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS24.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS24_Z')
    node = outtree.addNode(':MS24:BEAM',usage='TEXT')
    node = outtree.addNode(':MS24:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS24B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS24B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms24b", $SHOT), "volts"), DIM_OF(ptdata("ms24b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS24:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS24:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS24:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS24:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS24A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS24A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms24a", $SHOT), "volts"), DIM_OF(ptdata("ms24a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS24:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS24:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS24:TIME',usage='SIGNAL')
node = outtree.addNode(':MS25',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS25.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS25.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS25.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS25_R')
        node = outtree.addNode(':MS25.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS25.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS25.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS25_Z')
    node = outtree.addNode(':MS25:BEAM',usage='TEXT')
    node = outtree.addNode(':MS25:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS25B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS25B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms25b", $SHOT), "volts"), DIM_OF(ptdata("ms25b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS25:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS25:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS25:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS25:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS25A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS25A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms25a", $SHOT), "volts"), DIM_OF(ptdata("ms25a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS25:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS25:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS25:TIME',usage='SIGNAL')
node = outtree.addNode(':MS26',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS26.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS26.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS26.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS26_R')
        node = outtree.addNode(':MS26.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS26.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS26.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS26_Z')
    node = outtree.addNode(':MS26:BEAM',usage='TEXT')
    node = outtree.addNode(':MS26:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS26B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS26B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms26b", $SHOT), "volts"), DIM_OF(ptdata("ms26b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS26:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS26:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS26:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS26:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS26A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS26A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms26a", $SHOT), "volts"), DIM_OF(ptdata("ms26a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS26:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS26:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS26:TIME',usage='SIGNAL')
node = outtree.addNode(':MS27',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS27.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS27.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS27.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS27_R')
        node = outtree.addNode(':MS27.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS27.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS27.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS27_Z')
    node = outtree.addNode(':MS27:BEAM',usage='TEXT')
    node = outtree.addNode(':MS27:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS27B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS27B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms27b", $SHOT), "volts"), DIM_OF(ptdata("ms27b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS27:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS27:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS27:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS27:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS27A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS27A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms27a", $SHOT), "volts"), DIM_OF(ptdata("ms27a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS27:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS27:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS27:TIME',usage='SIGNAL')
node = outtree.addNode(':MS28',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS28.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS28.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS28.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS28_R')
        node = outtree.addNode(':MS28.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS28.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS28.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS28_Z')
    node = outtree.addNode(':MS28:BEAM',usage='TEXT')
    node = outtree.addNode(':MS28:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS28B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS28B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms28b", $SHOT), "volts"), DIM_OF(ptdata("ms28b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS28:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS28:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS28:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS28:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS28A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS28A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms28a", $SHOT), "volts"), DIM_OF(ptdata("ms28a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS28:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS28:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS28:TIME',usage='SIGNAL')
node = outtree.addNode(':MS29',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS29.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS29.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS29.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS29_R')
        node = outtree.addNode(':MS29.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS29.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS29.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS29_Z')
    node = outtree.addNode(':MS29:BEAM',usage='TEXT')
    node = outtree.addNode(':MS29:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS29B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS29B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms29b", $SHOT), "volts"), DIM_OF(ptdata("ms29b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS29:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS29:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS29:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS29:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS29A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS29A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms29a", $SHOT), "volts"), DIM_OF(ptdata("ms29a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS29:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS29:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS29:TIME',usage='SIGNAL')
node = outtree.addNode(':MS30',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS30.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS30.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS30.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS30_R')
        node = outtree.addNode(':MS30.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS30.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS30.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS30_Z')
    node = outtree.addNode(':MS30:BEAM',usage='TEXT')
    node = outtree.addNode(':MS30:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS30B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS30B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms30b", $SHOT), "volts"), DIM_OF(ptdata("ms30b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS30:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS30:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS30:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS30:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS30A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS30A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms30a", $SHOT), "volts"), DIM_OF(ptdata("ms30a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS30:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS30:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS30:TIME',usage='SIGNAL')
node = outtree.addNode(':MS31',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS31.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS31.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS31.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS31_R')
        node = outtree.addNode(':MS31.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS31.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS31.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS31_Z')
    node = outtree.addNode(':MS31:BEAM',usage='TEXT')
    node = outtree.addNode(':MS31:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS31B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS31B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms31b", $SHOT), "volts"), DIM_OF(ptdata("ms31b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS31:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS31:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS31:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS31:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS31A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS31A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms31a", $SHOT), "volts"), DIM_OF(ptdata("ms31a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS31:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS31:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS31:TIME',usage='SIGNAL')
node = outtree.addNode(':MS32',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS32.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS32.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS32.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS32_R')
        node = outtree.addNode(':MS32.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS32.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS32.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS32_Z')
    node = outtree.addNode(':MS32:BEAM',usage='TEXT')
    node = outtree.addNode(':MS32:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS32B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS32B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms32b", $SHOT), "volts"), DIM_OF(ptdata("ms32b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS32:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS32:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS32:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS32:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS32A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS32A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms32a", $SHOT), "volts"), DIM_OF(ptdata("ms32a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS32:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS32:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS32:TIME',usage='SIGNAL')
node = outtree.addNode(':MS33',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS33.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS33.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS33.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS33_R')
        node = outtree.addNode(':MS33.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS33.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS33.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS33_Z')
    node = outtree.addNode(':MS33:BEAM',usage='TEXT')
    node = outtree.addNode(':MS33:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS33B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS33B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms33b", $SHOT), "volts"), DIM_OF(ptdata("ms33b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS33:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS33:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS33:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS33:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS33A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS33A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms33a", $SHOT), "volts"), DIM_OF(ptdata("ms33a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS33:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS33:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS33:TIME',usage='SIGNAL')
node = outtree.addNode(':MS34',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS34.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS34.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS34.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS34_R')
        node = outtree.addNode(':MS34.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS34.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS34.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS34_Z')
    node = outtree.addNode(':MS34:BEAM',usage='TEXT')
    node = outtree.addNode(':MS34:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS34B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS34B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms34b", $SHOT), "volts"), DIM_OF(ptdata("ms34b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS34:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS34:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS34:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS34:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS34A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS34A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms34a", $SHOT), "volts"), DIM_OF(ptdata("ms34a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS34:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS34:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS34:TIME',usage='SIGNAL')
node = outtree.addNode(':MS35',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS35.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS35.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS35.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS35_R')
        node = outtree.addNode(':MS35.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS35.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS35.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS35_Z')
    node = outtree.addNode(':MS35:BEAM',usage='TEXT')
    node = outtree.addNode(':MS35:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS35B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS35B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms35b", $SHOT), "volts"), DIM_OF(ptdata("ms35b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS35:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS35:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS35:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS35:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS35A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS35A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms35a", $SHOT), "volts"), DIM_OF(ptdata("ms35a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS35:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS35:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS35:TIME',usage='SIGNAL')
node = outtree.addNode(':MS36',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS36.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS36.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS36.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS36_R')
        node = outtree.addNode(':MS36.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS36.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS36.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS36_Z')
    node = outtree.addNode(':MS36:BEAM',usage='TEXT')
    node = outtree.addNode(':MS36:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS36B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS36B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms36b", $SHOT), "volts"), DIM_OF(ptdata("ms36b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS36:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS36:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS36:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS36:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS36A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS36A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms36a", $SHOT), "volts"), DIM_OF(ptdata("ms36a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS36:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS36:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS36:TIME',usage='SIGNAL')
node = outtree.addNode(':MS37',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS37.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS37.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS37.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS37_R')
        node = outtree.addNode(':MS37.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS37.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS37.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS37_Z')
    node = outtree.addNode(':MS37:BEAM',usage='TEXT')
    node = outtree.addNode(':MS37:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS37B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS37B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms37b", $SHOT), "volts"), DIM_OF(ptdata("ms37b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS37:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS37:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS37:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS37:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS37A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS37A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms37a", $SHOT), "volts"), DIM_OF(ptdata("ms37a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS37:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS37:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS37:TIME',usage='SIGNAL')
node = outtree.addNode(':MS38',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS38.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS38.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS38.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS38_R')
        node = outtree.addNode(':MS38.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS38.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS38.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS38_Z')
    node = outtree.addNode(':MS38:BEAM',usage='TEXT')
    node = outtree.addNode(':MS38:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS38B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS38B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms38b", $SHOT), "volts"), DIM_OF(ptdata("ms38b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS38:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS38:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS38:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS38:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS38A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS38A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms38a", $SHOT), "volts"), DIM_OF(ptdata("ms38a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS38:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS38:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS38:TIME',usage='SIGNAL')
node = outtree.addNode(':MS39',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS39.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS39.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS39.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS39_R')
        node = outtree.addNode(':MS39.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS39.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS39.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS39_Z')
    node = outtree.addNode(':MS39:BEAM',usage='TEXT')
    node = outtree.addNode(':MS39:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS39B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS39B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms39b", $SHOT), "volts"), DIM_OF(ptdata("ms39b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS39:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS39:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS39:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS39:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS39A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS39A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms39a", $SHOT), "volts"), DIM_OF(ptdata("ms39a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS39:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS39:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS39:TIME',usage='SIGNAL')
node = outtree.addNode(':MS40',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS40.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS40.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS40.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS40_R')
        node = outtree.addNode(':MS40.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS40.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS40.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS40_Z')
    node = outtree.addNode(':MS40:BEAM',usage='TEXT')
    node = outtree.addNode(':MS40:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS40B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS40B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms40b", $SHOT), "volts"), DIM_OF(ptdata("ms40b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS40:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS40:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS40:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS40:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS40A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS40A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms40a", $SHOT), "volts"), DIM_OF(ptdata("ms40a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS40:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS40:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS40:TIME',usage='SIGNAL')
node = outtree.addNode(':MS41',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS41.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS41.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS41.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS41_R')
        node = outtree.addNode(':MS41.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS41.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS41.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS41_Z')
    node = outtree.addNode(':MS41:BEAM',usage='TEXT')
    node = outtree.addNode(':MS41:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS41B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS41B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms41b", $SHOT), "volts"), DIM_OF(ptdata("ms41b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS41:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS41:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS41:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS41:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS41A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS41A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms41a", $SHOT), "volts"), DIM_OF(ptdata("ms41a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS41:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS41:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS41:TIME',usage='SIGNAL')
node = outtree.addNode(':MS42',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS42.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS42.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS42.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS42_R')
        node = outtree.addNode(':MS42.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS42.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS42.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS42_Z')
    node = outtree.addNode(':MS42:BEAM',usage='TEXT')
    node = outtree.addNode(':MS42:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS42B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS42B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms42b", $SHOT), "volts"), DIM_OF(ptdata("ms42b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS42:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS42:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS42:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS42:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS42A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS42A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms42a", $SHOT), "volts"), DIM_OF(ptdata("ms42a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS42:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS42:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS42:TIME',usage='SIGNAL')
node = outtree.addNode(':MS43',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS43.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS43.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS43.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS43_R')
        node = outtree.addNode(':MS43.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS43.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS43.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS43_Z')
    node = outtree.addNode(':MS43:BEAM',usage='TEXT')
    node = outtree.addNode(':MS43:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS43B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS43B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms43b", $SHOT), "volts"), DIM_OF(ptdata("ms43b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS43:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS43:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS43:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS43:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS43A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS43A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms43a", $SHOT), "volts"), DIM_OF(ptdata("ms43a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS43:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS43:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS43:TIME',usage='SIGNAL')
node = outtree.addNode(':MS44',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS44.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS44.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS44.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS44_R')
        node = outtree.addNode(':MS44.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS44.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS44.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS44_Z')
    node = outtree.addNode(':MS44:BEAM',usage='TEXT')
    node = outtree.addNode(':MS44:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS44B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS44B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms44b", $SHOT), "volts"), DIM_OF(ptdata("ms44b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS44:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS44:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS44:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS44:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS44A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS44A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms44a", $SHOT), "volts"), DIM_OF(ptdata("ms44a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS44:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS44:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS44:TIME',usage='SIGNAL')
node = outtree.addNode(':MS45',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS45.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS45.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS45.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS45_R')
        node = outtree.addNode(':MS45.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS45.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS45.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS45_Z')
    node = outtree.addNode(':MS45:BEAM',usage='TEXT')
    node = outtree.addNode(':MS45:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS45B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS45B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms45b", $SHOT), "volts"), DIM_OF(ptdata("ms45b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS45:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS45:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS45:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS45:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS45A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS45A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms45a", $SHOT), "volts"), DIM_OF(ptdata("ms45a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS45:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS45:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS45:TIME',usage='SIGNAL')
node = outtree.addNode(':MS46',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS46.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS46.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS46.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS46_R')
        node = outtree.addNode(':MS46.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS46.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS46.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS46_Z')
    node = outtree.addNode(':MS46:BEAM',usage='TEXT')
    node = outtree.addNode(':MS46:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS46B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS46B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms46b", $SHOT), "volts"), DIM_OF(ptdata("ms46b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS46:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS46:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS46:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS46:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS46A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS46A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms46a", $SHOT), "volts"), DIM_OF(ptdata("ms46a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS46:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS46:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS46:TIME',usage='SIGNAL')
node = outtree.addNode(':MS47',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS47.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS47.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS47.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS47_R')
        node = outtree.addNode(':MS47.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS47.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS47.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS47_Z')
    node = outtree.addNode(':MS47:BEAM',usage='TEXT')
    node = outtree.addNode(':MS47:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS47B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS47B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms47b", $SHOT), "volts"), DIM_OF(ptdata("ms47b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS47:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS47:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS47:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS47:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS47A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS47A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms47a", $SHOT), "volts"), DIM_OF(ptdata("ms47a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS47:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS47:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS47:TIME',usage='SIGNAL')
node = outtree.addNode(':MS48',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS48.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS48.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS48.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS48_R')
        node = outtree.addNode(':MS48.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS48.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS48.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS48_Z')
    node = outtree.addNode(':MS48:BEAM',usage='TEXT')
    node = outtree.addNode(':MS48:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS48B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS48B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms48b", $SHOT), "volts"), DIM_OF(ptdata("ms48b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS48:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS48:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS48:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS48:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS48A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS48A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms48a", $SHOT), "volts"), DIM_OF(ptdata("ms48a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS48:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS48:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS48:TIME',usage='SIGNAL')
node = outtree.addNode(':MS49',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS49.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS49.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS49.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS49_R')
        node = outtree.addNode(':MS49.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS49.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS49.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS49_Z')
    node = outtree.addNode(':MS49:BEAM',usage='TEXT')
    node = outtree.addNode(':MS49:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS49B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS49B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms49b", $SHOT), "volts"), DIM_OF(ptdata("ms49b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS49:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS49:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS49:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS49:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS49A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS49A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms49a", $SHOT), "volts"), DIM_OF(ptdata("ms49a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS49:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS49:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS49:TIME',usage='SIGNAL')
node = outtree.addNode(':MS50',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS50.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS50.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS50.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS50_R')
        node = outtree.addNode(':MS50.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS50.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS50.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS50_Z')
    node = outtree.addNode(':MS50:BEAM',usage='TEXT')
    node = outtree.addNode(':MS50:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS50B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS50B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms50b", $SHOT), "volts"), DIM_OF(ptdata("ms50b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS50:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS50:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS50:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS50:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS50A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS50A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms50a", $SHOT), "volts"), DIM_OF(ptdata("ms50a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS50:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS50:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS50:TIME',usage='SIGNAL')
node = outtree.addNode(':MS51',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS51.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS51.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS51.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS51_R')
        node = outtree.addNode(':MS51.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS51.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS51.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS51_Z')
    node = outtree.addNode(':MS51:BEAM',usage='TEXT')
    node = outtree.addNode(':MS51:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS51B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS51B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms51b", $SHOT), "volts"), DIM_OF(ptdata("ms51b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS51:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS51:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS51:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS51:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS51A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS51A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms51a", $SHOT), "volts"), DIM_OF(ptdata("ms51a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS51:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS51:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS51:TIME',usage='SIGNAL')
node = outtree.addNode(':MS52',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS52.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS52.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS52.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS52_R')
        node = outtree.addNode(':MS52.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS52.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS52.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS52_Z')
    node = outtree.addNode(':MS52:BEAM',usage='TEXT')
    node = outtree.addNode(':MS52:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS52B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS52B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms52b", $SHOT), "volts"), DIM_OF(ptdata("ms52b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS52:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS52:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS52:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS52:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS52A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS52A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms52a", $SHOT), "volts"), DIM_OF(ptdata("ms52a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS52:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS52:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS52:TIME',usage='SIGNAL')
node = outtree.addNode(':MS53',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS53.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS53.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS53.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS53_R')
        node = outtree.addNode(':MS53.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS53.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS53.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS53_Z')
    node = outtree.addNode(':MS53:BEAM',usage='TEXT')
    node = outtree.addNode(':MS53:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS53B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS53B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms53b", $SHOT), "volts"), DIM_OF(ptdata("ms53b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS53:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS53:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS53:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS53:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS53A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS53A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms53a", $SHOT), "volts"), DIM_OF(ptdata("ms53a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS53:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS53:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS53:TIME',usage='SIGNAL')
node = outtree.addNode(':MS54',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS54.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS54.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS54.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS54_R')
        node = outtree.addNode(':MS54.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS54.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS54.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS54_Z')
    node = outtree.addNode(':MS54:BEAM',usage='TEXT')
    node = outtree.addNode(':MS54:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS54B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS54B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms54b", $SHOT), "volts"), DIM_OF(ptdata("ms54b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS54:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS54:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS54:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS54:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS54A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS54A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms54a", $SHOT), "volts"), DIM_OF(ptdata("ms54a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS54:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS54:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS54:TIME',usage='SIGNAL')
node = outtree.addNode(':MS55',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS55.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS55.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS55.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS55_R')
        node = outtree.addNode(':MS55.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS55.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS55.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS55_Z')
    node = outtree.addNode(':MS55:BEAM',usage='TEXT')
    node = outtree.addNode(':MS55:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS55B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS55B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms55b", $SHOT), "volts"), DIM_OF(ptdata("ms55b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS55:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS55:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS55:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS55:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS55A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS55A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms55a", $SHOT), "volts"), DIM_OF(ptdata("ms55a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS55:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS55:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS55:TIME',usage='SIGNAL')
node = outtree.addNode(':MS56',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS56.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS56.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS56.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS56_R')
        node = outtree.addNode(':MS56.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS56.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS56.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS56_Z')
    node = outtree.addNode(':MS56:BEAM',usage='TEXT')
    node = outtree.addNode(':MS56:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS56B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS56B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms56b", $SHOT), "volts"), DIM_OF(ptdata("ms56b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS56:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS56:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS56:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS56:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS56A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS56A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms56a", $SHOT), "volts"), DIM_OF(ptdata("ms56a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS56:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS56:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS56:TIME',usage='SIGNAL')
node = outtree.addNode(':MS57',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS57.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS57.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS57.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS57_R')
        node = outtree.addNode(':MS57.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS57.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS57.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS57_Z')
    node = outtree.addNode(':MS57:BEAM',usage='TEXT')
    node = outtree.addNode(':MS57:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS57B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS57B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms57b", $SHOT), "volts"), DIM_OF(ptdata("ms57b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS57:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS57:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS57:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS57:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS57A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS57A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms57a", $SHOT), "volts"), DIM_OF(ptdata("ms57a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS57:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS57:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS57:TIME',usage='SIGNAL')
node = outtree.addNode(':MS58',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS58.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS58.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS58.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS58_R')
        node = outtree.addNode(':MS58.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS58.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS58.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS58_Z')
    node = outtree.addNode(':MS58:BEAM',usage='TEXT')
    node = outtree.addNode(':MS58:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS58B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS58B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms58b", $SHOT), "volts"), DIM_OF(ptdata("ms58b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS58:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS58:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS58:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS58:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS58A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS58A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms58a", $SHOT), "volts"), DIM_OF(ptdata("ms58a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS58:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS58:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS58:TIME',usage='SIGNAL')
node = outtree.addNode(':MS59',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS59.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS59.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS59.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS59_R')
        node = outtree.addNode(':MS59.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS59.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS59.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS59_Z')
    node = outtree.addNode(':MS59:BEAM',usage='TEXT')
    node = outtree.addNode(':MS59:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS59B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS59B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms59b", $SHOT), "volts"), DIM_OF(ptdata("ms59b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS59:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS59:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS59:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS59:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS59A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS59A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms59a", $SHOT), "volts"), DIM_OF(ptdata("ms59a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS59:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS59:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS59:TIME',usage='SIGNAL')
node = outtree.addNode(':MS60',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS60.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS60.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS60.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS60_R')
        node = outtree.addNode(':MS60.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS60.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS60.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS60_Z')
    node = outtree.addNode(':MS60:BEAM',usage='TEXT')
    node = outtree.addNode(':MS60:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS60B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS60B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms60b", $SHOT), "volts"), DIM_OF(ptdata("ms60b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS60:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS60:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS60:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS60:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS60A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS60A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms60a", $SHOT), "volts"), DIM_OF(ptdata("ms60a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS60:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS60:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS60:TIME',usage='SIGNAL')
node = outtree.addNode(':MS61',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS61.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS61.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS61.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS61_R')
        node = outtree.addNode(':MS61.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS61.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS61.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS61_Z')
    node = outtree.addNode(':MS61:BEAM',usage='TEXT')
    node = outtree.addNode(':MS61:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS61B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS61B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms61b", $SHOT), "volts"), DIM_OF(ptdata("ms61b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS61:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS61:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS61:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS61:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS61A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS61A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms61a", $SHOT), "volts"), DIM_OF(ptdata("ms61a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS61:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS61:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS61:TIME',usage='SIGNAL')
node = outtree.addNode(':MS62',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS62.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS62.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS62.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS62_R')
        node = outtree.addNode(':MS62.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS62.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS62.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS62_Z')
    node = outtree.addNode(':MS62:BEAM',usage='TEXT')
    node = outtree.addNode(':MS62:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS62B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS62B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms62b", $SHOT), "volts"), DIM_OF(ptdata("ms62b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS62:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS62:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS62:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS62:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS62A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS62A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms62a", $SHOT), "volts"), DIM_OF(ptdata("ms62a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS62:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS62:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS62:TIME',usage='SIGNAL')
node = outtree.addNode(':MS63',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS63.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS63.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS63.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS63_R')
        node = outtree.addNode(':MS63.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS63.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS63.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS63_Z')
    node = outtree.addNode(':MS63:BEAM',usage='TEXT')
    node = outtree.addNode(':MS63:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS63B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS63B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms63b", $SHOT), "volts"), DIM_OF(ptdata("ms63b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS63:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS63:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS63:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS63:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS63A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS63A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms63a", $SHOT), "volts"), DIM_OF(ptdata("ms63a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS63:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS63:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS63:TIME',usage='SIGNAL')
node = outtree.addNode(':MS64',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS64.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS64.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS64.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS64_R')
        node = outtree.addNode(':MS64.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS64.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS64.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS64_Z')
    node = outtree.addNode(':MS64:BEAM',usage='TEXT')
    node = outtree.addNode(':MS64:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS64B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS64B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms64b", $SHOT), "volts"), DIM_OF(ptdata("ms64b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS64:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS64:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS64:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS64:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS64A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS64A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms64a", $SHOT), "volts"), DIM_OF(ptdata("ms64a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS64:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS64:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS64:TIME',usage='SIGNAL')
node = outtree.addNode(':MS65',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS65.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS65.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS65.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS65_R')
        node = outtree.addNode(':MS65.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS65.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS65.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS65_Z')
    node = outtree.addNode(':MS65:BEAM',usage='TEXT')
    node = outtree.addNode(':MS65:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS65B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS65B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms65b", $SHOT), "volts"), DIM_OF(ptdata("ms65b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS65:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS65:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS65:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS65:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS65A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS65A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms65a", $SHOT), "volts"), DIM_OF(ptdata("ms65a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS65:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS65:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS65:TIME',usage='SIGNAL')
node = outtree.addNode(':MS66',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS66.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS66.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS66.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS66_R')
        node = outtree.addNode(':MS66.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS66.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS66.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS66_Z')
    node = outtree.addNode(':MS66:BEAM',usage='TEXT')
    node = outtree.addNode(':MS66:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS66B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS66B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms66b", $SHOT), "volts"), DIM_OF(ptdata("ms66b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS66:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS66:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS66:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS66:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS66A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS66A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms66a", $SHOT), "volts"), DIM_OF(ptdata("ms66a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS66:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS66:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS66:TIME',usage='SIGNAL')
node = outtree.addNode(':MS67',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS67.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS67.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS67.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS67_R')
        node = outtree.addNode(':MS67.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS67.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS67.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS67_Z')
    node = outtree.addNode(':MS67:BEAM',usage='TEXT')
    node = outtree.addNode(':MS67:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS67B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS67B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms67b", $SHOT), "volts"), DIM_OF(ptdata("ms67b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS67:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS67:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS67:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS67:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS67A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS67A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms67a", $SHOT), "volts"), DIM_OF(ptdata("ms67a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS67:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS67:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS67:TIME',usage='SIGNAL')
node = outtree.addNode(':MS68',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS68.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS68.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS68.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS68_R')
        node = outtree.addNode(':MS68.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS68.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS68.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS68_Z')
    node = outtree.addNode(':MS68:BEAM',usage='TEXT')
    node = outtree.addNode(':MS68:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS68B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS68B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms68b", $SHOT), "volts"), DIM_OF(ptdata("ms68b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS68:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS68:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS68:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS68:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS68A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS68A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms68a", $SHOT), "volts"), DIM_OF(ptdata("ms68a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS68:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS68:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS68:TIME',usage='SIGNAL')
node = outtree.addNode(':MS69',usage='SIGNAL')
if True:
    node = outtree.addNode(':MS69.GEOMETRY',usage='STRUCTURE')
    if True:
        node = outtree.addNode(':MS69.GEOMETRY:A1',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A2',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A3',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A4',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A5',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A6',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:A7',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:ALPHA',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:ENERGY',usage='TEXT')
        node = outtree.addNode(':MS69.GEOMETRY:OMEGA',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:PHI_DOPLER',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:PHI_TOR',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:R',usage='NUMERIC')
        node.addTag('MS69_R')
        node = outtree.addNode(':MS69.GEOMETRY:RESOLUTION',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:THETA',usage='NUMERIC')
        node = outtree.addNode(':MS69.GEOMETRY:VIEWPORT',usage='TEXT')
        node = outtree.addNode(':MS69.GEOMETRY:Z',usage='NUMERIC')
        node.addTag('MS69_Z')
    node = outtree.addNode(':MS69:BEAM',usage='TEXT')
    node = outtree.addNode(':MS69:COS_BLS',usage='SIGNAL')
    node.addTag('MSBLS69B')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS69B:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms69b", $SHOT), "volts"), DIM_OF(ptdata("ms69b", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS69:COS_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS69:COS_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS69:PMTVOLTS',usage='NUMERIC')
    node = outtree.addNode(':MS69:SIN_BLS',usage='SIGNAL')
    node.addTag('MSBLS69A')
    d = outtree.tdiCompile('Build_Signal(Build_With_Units($VALUE - \MSBLS69A:BASELINE_AVE, "volts"), Build_With_Units(ptdata("ms69a", $SHOT), "volts"), DIM_OF(ptdata("ms69a", $SHOT)))')
    node.putData(d)
    if True:
        node = outtree.addNode(':MS69:SIN_BLS:BASELINE_AVE',usage='NUMERIC')
        d = outtree.tdiCompile('0.')
        node.putData(d)
        node = outtree.addNode(':MS69:SIN_BLS:BASELINE_SD',usage='NUMERIC')
        d = outtree.tdiCompile('100.')
        node.putData(d)
    node = outtree.addNode(':MS69:TIME',usage='SIGNAL')
node = outtree.addNode(':MSECALIB_CP',usage='ACTION')
d = outtree.tdiCompile('Build_Action(Build_Dispatch(2, "mdsloader", "STAR", 1, ""), LOADDATA("MSECALIB_CP", "talos", "/fusion/usc/src/mds_btshot/mse/copyMSECalibration.sh &"), "", *, *)')
node.putData(d)
outtree.write()
